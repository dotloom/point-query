enum FeatureType {
  int8 = 1;                        // fixed size 1 byte number: -127~128
  uint8 = 2;                       // fixed size 1 byte number: 0~255
  int16 = 3;                       // fixed size 2 byte number: -32768~32768
  int16LE = 4;                     // fixed size 2 byte number: -32768~32768
  uint16 = 5;                      // fixed size 2 byte number: 0~65536
  uint16LE = 6;                    // fixed size 2 byte number: 0~255 + (0~255)<<16 => 0~665536
  int32 = 7;                       // fixed size 4 byte number: 0~255 + (0~255)<<16 + (0~255)<<24 + (0~256)<<32 -2147483648 => 2147483648~-2147483648
  int32LE = 8;                     // fixed size 4 byte number: 0~255 + (0~255)<<16 + (0~255)<<24 + (0~256)<<32 -2147483648 => 2147483648~-2147483648
  uint32 = 9;                      // fixed size 4 byte number: 0~255 + (0~255)<<16 + (0~255)<<24 + (0~256)<<32 => 0~4294967296
  uint32LE = 10;                   // fixed size 4 byte number: 0~255 + (0~255)<<16 + (0~255)<<24 + (0~256)<<32 => 0~4294967296
  sint32 = 11;                     // fixed size 4 byte, reverse stored number: -2147483648~2147483648
  sint32LE = 12;                   // fixed size 4 byte, reverse stored number: -2147483648~2147483648
  varint32 = 13;                   // variable size 2~5 byte number: [0~127 + (1bit] + [(0~127)<<7) + (1bit] + (0~127)<<14) + (1bit] + [0~127) + (1bit] + 0~15) => 2147483648~-2147483648
  varuint32 = 14;                  // variable size 2~5 byte, reverse stored number: 0~4294967296
  varsint32 = 15;                  // variable size 2~5 byte, reverse stored number: -2147483648~2147483648
  int64 = 16;                      // fixed size 8 byte number: -9223372036854776000~9223372036854776000
  int64LE = 17;                    // fixed size 8 byte number: -9223372036854776000~9223372036854776000
  uint64 = 18;                     // fixed size 8 byte number: 0~18446744073709552000
  uint64LE = 19;                   // fixed size 8 byte number: 0~18446744073709552000
  sint64 = 20;                     // fixed size 8 byte, reverse stored number: 9223372036854776000~-9223372036854776000
  sint64LE = 21;                   // fixed size 8 byte, reverse stored number: 9223372036854776000~-9223372036854776000
  varuint64 = 22;                  // variable size 2~9 byte number: [0~127 + (1bit] + [(0~127)<<7) + (1bit] + (0~127)<<14) + (1bit] + [0~127) + (1bit] + 0~15) => 9223372036854776000~-9223372036854776000
  varint64 = 23;                   // variable size 2~9 byte number: 0~18446744073709552000
  varsint64 = 24;                  // variable size 2~9 byte, reverse stored number: -9223372036854776000~9223372036854776000
  bytes = 25;                      // variable size bytes: uint32-size-number + amount of bytes
  bytesLE = 26;                    // variable size bytes: uint32-size-number + amount of bytes
  varbytes = 27;                   // variable size bytes with varsize length: varuint32-number + amount of bytes
  varbytes = 28;                   // variable size bytes with varsize length: varuint32-number + amount of bytes
  string = 29;                     // variable size string: utf-8 encoded bytes
  stringLE = 30;                   // variable size string: utf-8 encoded bytes
  varstring = 31;                  // variable size string with varsize length: utf-8 encoded varbytes
  bool = 32;                       // 0 = false, 1~7 = true
  float = 33;                      // fixed size 4 byte floating point
  double = 34;                     // fixed size 8 byte floating point
  fixedstring = 35[(length) = -1]; // fixed amount of string
  fixedbytes = 36[(length) = -1];  // fixed amount of bytes
}
